
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  ** This notice applies to any and all portions of this file
  * that are not between comment pairs USER CODE BEGIN and
  * USER CODE END. Other portions of this file, whether 
  * inserted by the user or by software development tools
  * are owned by their respective copyright owners.
  *
  * COPYRIGHT(c) 2018 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32l4xx_hal.h"

/* USER CODE BEGIN Includes */
#include "stdbool.h"
#include "string.h"
#include "stdio.h"
#include "drv_95HF.h"
#include "../Inc/DriversHeader/drv_led.h"
#include "../Inc/DriversHeader/drv_spi.h"
#include "../Inc/DriversHeader/btn_drv.h"
#include "../Inc/DriversHeader/com.h"

#define COM_XFER_SIZE   256

/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef 		hspi;
UART_HandleTypeDef      huart;
TIM_HandleTypeDef 		htim2;
TIM_HandleTypeDef 		htim3;
TIM_HandleTypeDef 		htim4;


/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef		TimHandleDelay;
TIM_HandleTypeDef       TimHandleTimeout;
TIM_HandleTypeDef       TimHandleAppli;

/* TT1 (PCD only)*/
uint8_t TT1Tag[NFCT1_MAX_TAGMEMORY];

/* TT2 */
uint8_t TT2Tag[NFCT2_MAX_TAGMEMORY];

/* TT3 */
uint8_t TT3Tag[NFCT3_MAX_TAGMEMORY];
uint8_t *TT3AttribInfo = TT3Tag, *TT3NDEFfile = &TT3Tag[NFCT3_ATTRIB_INFO_SIZE];

/* TT4 */
uint8_t CardCCfile      [NFCT4_MAX_CCMEMORY];
uint8_t CardNDEFfileT4A [NFCT4_MAX_NDEFMEMORY];
uint8_t CardNDEFfileT4B [NFCT4_MAX_NDEFMEMORY];

/* TT5 (PCD only)*/
uint8_t TT5Tag[NFCT5_MAX_TAGMEMORY];

sURI_Info url;
extern volatile bool terminal_display_enabled;
extern uint8_t NDEF_Buffer [];
extern DeviceMode_t devicemode;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
//static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM4_Init(void);
//static void MX_SPI1_Init(void);
//static void MX_USART2_UART_Init(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
void clearScreen (void);
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	sRecordInfo_uri RecordStruct;
    int8_t TagType = TRACK_NOTHING;
	bool TagDetected = false;
	bool terminal_msg_flag = false ;
	uint8_t status = ERRORCODE_GENERIC;
	static char dataOut[COM_XFER_SIZE];
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  RFTRANS_ConfigureInterfacePin();
  HAL_GPIO_WritePin(INTERFACE_GPIO_PORT, INTERFACE_PIN, GPIO_PIN_SET);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
  MX_TIM3_Init();
  MX_TIM4_Init();
  /* USER CODE BEGIN 2 */

  /* Init Leds of the X-NUCLEO-NFC03A1 expansion board */
  initLED();
  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);

  /* 95HF HW Init */
  ConfigManager_HWInit();

  USARTConfig();


  /* Run the main menu */
    LED_On(GREEN_LED1);
    HAL_Delay(1000);
    LED_Off(GREEN_LED1);
  /*drbug*/
  /*for(uint8_t i = 0; i < 4; i++)
  {
	  LED_Toggle(GREEN_LED3);
	  LED_Toggle(BLUE_LED2);
	  LED_Toggle(BLUE_LED4);
	  LED_Toggle(GREEN_LED1);
	  HAL_Delay(100);
  }*/

  /*---HT UI default welcome msg----------*/

  /*clear screen*/
  clearScreen();

  sprintf( dataOut, "\r\n\r\n---------------------------------------\r\n******Welcome to x-cube-nfc3 demo******\r\n----------------------------------------");
  HAL_UART_Transmit( &UartHandle, ( uint8_t * )dataOut, strlen( dataOut ), 500);

  sprintf(dataOut, "\r\n\r\nPlease bring an NFC tag to the board vicinity and Press User Button B1 on the board to start URI Writer/Reader demo on the tag");
  HAL_UART_Transmit( &UartHandle, ( uint8_t * )dataOut, strlen( dataOut ), 500);

  terminal_msg_flag = true ;

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {


  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	  devicemode = PCD;

	  /* Scan to find if there is a tag */
	  TagType = ConfigManager_TagHunting(TRACK_ALL);

	  switch(TagType)
	  {
	  case TRACK_NFCTYPE1:
		{
		  LED_Off(GREEN_LED1);
		  LED_On(BLUE_LED2);
		  LED_On(GREEN_LED3);
		  LED_On(BLUE_LED4);
		  TagDetected = true;

		  if(terminal_msg_flag == true )
		  {
			terminal_msg_flag = false ;
			/*---HT UI msg----------*/
			sprintf( dataOut, "\r\n\r\nTRACK_NFCTYPE1 NFC tag detected nearby");
			HAL_UART_Transmit( &UartHandle, ( uint8_t * )dataOut, strlen( dataOut ), 500 );
		  }

		}
		break;
	  case TRACK_NFCTYPE2:
		{
		  LED_Off(GREEN_LED1);
		  LED_On(BLUE_LED2);
		  TagDetected = true;

		  if(terminal_msg_flag == true )
		  {
			terminal_msg_flag = false ;

			/*---HT UI msg----------*/
			sprintf( dataOut, "\r\n\r\nTRACK_NFCTYPE2 NFC tag detected nearby");
			HAL_UART_Transmit( &UartHandle, ( uint8_t * )dataOut, strlen( dataOut ), 500 );
		  }
		}
		break;

	  case TRACK_NFCTYPE3:
		{
		  LED_Off(GREEN_LED1);
		  LED_On(GREEN_LED3);
		  TagDetected = true;

		  if(terminal_msg_flag == true )
		  {
			terminal_msg_flag = false ;

			/*---HT UI msg----------*/
			sprintf( dataOut, "\r\n\r\nTRACK_NFCTYPE3 NFC tag detected nearby");
			HAL_UART_Transmit( &UartHandle, ( uint8_t * )dataOut, strlen( dataOut ), 500 );
		  }
		}
		break;

	  case TRACK_NFCTYPE4A:
		{
		  LED_Off(GREEN_LED1);
		  LED_On(BLUE_LED4);
		  TagDetected = true;

		  if(terminal_msg_flag == true )
		  {
			terminal_msg_flag = false ;

			/*---HT UI msg----------*/
			sprintf( dataOut, "\r\n\r\nTRACK_NFCTYPE4A NFC tag detected nearby");
			HAL_UART_Transmit( &UartHandle, ( uint8_t * )dataOut, strlen( dataOut ), 500 );
		  }
		}
		break;

	  case TRACK_NFCTYPE4B:
		{
		  LED_Off(GREEN_LED1);
		  LED_On(GREEN_LED3);
		  LED_On(BLUE_LED4);
		  TagDetected = true;

		  if(terminal_msg_flag == true )
		  {
			terminal_msg_flag = false ;

			/*---HT UI msg----------*/
			sprintf( dataOut, "\r\n\r\nTRACK_NFCTYPE4B NFC tag detected nearby");
			HAL_UART_Transmit( &UartHandle, ( uint8_t * )dataOut, strlen( dataOut ), 500 );
		  }
		}
		break;
	  case TRACK_NFCTYPE5:
		{
		  LED_Off(GREEN_LED1);
		  LED_On(BLUE_LED2);
		  LED_On(GREEN_LED3);
		  TagDetected = true;

		  if(terminal_msg_flag == true )
		  {
			terminal_msg_flag = false ;

			/*---HT UI msg----------*/
			sprintf( dataOut, "\r\n\r\nTRACK_NFCTYPE5 NFC tag detected nearby");
			HAL_UART_Transmit( &UartHandle, ( uint8_t * )dataOut, strlen( dataOut ), 500 );
		  }
		}
		break;

	  default:
		LED_Off(BLUE_LED2);
		LED_Off(GREEN_LED3);
		LED_Off(BLUE_LED4);
		//LED_Toggle(GREEN_LED1);
		terminal_display_enabled = 0;
		TagDetected = false;

		if(terminal_msg_flag == false)
		{
		  terminal_msg_flag = true ;
		  /*---HT UI msg----------*/
		  sprintf( dataOut, "\r\n\r\nCurrently there is no NFC tag in the vicinity");
		  HAL_UART_Transmit( &UartHandle, ( uint8_t * )dataOut, strlen( dataOut ), 500 );
		}
		break;
	  }
	  HAL_Delay(300);

	  if ((terminal_display_enabled == 1) && (TagDetected == true))
	  {

		terminal_display_enabled = 0;
		TagDetected = false;

		/* Fill the structure of the NDEF URI */
		//FillTagURI("ST website for near field communication");
		FillTagURI((char)&TagType);
		status = NDEF_WriteURI(&url);

		HAL_Delay(500);

		if(status == RESULTOK) /*---if URI write passed----------*/
		{
		  status = ERRORCODE_GENERIC;

		  sprintf( dataOut, "\r\n\r\n--------------------\r\n*****URI Writer*****\r\n--------------------\r\nURI Information written successfully on the tag: \r\n     URI Information: [%s], \r\n     URI Protocol: [%s] ,  \r\n     URI Message: [%s]", (char *)url.Information, (char *)url.protocol, (char *)url.URI_Message );
		  HAL_UART_Transmit( &UartHandle, ( uint8_t * )dataOut, strlen( dataOut ), 500 );

		  memset(url.Information,'\0',400); /*Clear url buffer before reading*/

		  if (TagType == TRACK_NFCTYPE1)
		  {
			status = PCDNFCT1_ReadNDEF();
		  }
		  else if (TagType == TRACK_NFCTYPE2)
		  {
			status = PCDNFCT2_ReadNDEF();
		  }
		  else if (TagType == TRACK_NFCTYPE3)
		  {
			status = PCDNFCT3_ReadNDEF();
		  }
		  else if (TagType == TRACK_NFCTYPE4A || TagType == TRACK_NFCTYPE4B)
		  {
			status = PCDNFCT4_ReadNDEF();
		  }
		  else if (TagType == TRACK_NFCTYPE5)
		  {
			status = PCDNFCT5_ReadNDEF();
		  }

		  if ( status == RESULTOK )
		  {
			status = ERRORCODE_GENERIC;

			memset(NDEF_Buffer,'\0',20); /* Avoid printing useless characters */
			status = NDEF_IdentifyNDEF( &RecordStruct, NDEF_Buffer);

			if(status == RESULTOK && RecordStruct.TypeLength != 0)
			{
			  if (NDEF_ReadURI(&RecordStruct, &url)==RESULTOK) /*---if URI read passed---*/
			  {
				sprintf( dataOut, "\r\n\r\n--------------------\r\n*****URI Reader*****\r\n--------------------\r\nURI Information read successfully from the tag: \r\n     URI Information: [%s], \r\n     URI Protocol: [%s] ,  \r\n     URI Message: [%s]", (char *)url.Information, (char *)url.protocol, (char *)url.URI_Message );

				HAL_UART_Transmit(&UartHandle, (uint8_t *)dataOut, strlen( dataOut ), 500);
			  }
			}
		  }
		}
		else
		{
			sprintf( dataOut, "\r\n\r\n\r\n  Write Unsuccessful! :(");
			HAL_UART_Transmit(&UartHandle, (uint8_t *)dataOut, strlen( dataOut ), 500);
		}
	  }
  }
  /* USER CODE END 3 */

}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 36;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* USER CODE BEGIN 4 */

void clearScreen (void)
{
	char *strings[] = { "\033[0;0H", "\033[2J" };

	for (uint8_t i = 0; i < 2; i++)
	{
		HAL_UART_Transmit(&UartHandle, (uint8_t*) strings[i], strlen(strings[i]), 100);
	}
}

static void MX_TIM2_Init(void)
{
/*
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  TimHandleDelay.Instance = TIM2;
  TimHandleDelay.Init.Prescaler = 1;
  TimHandleDelay.Init.CounterMode = TIM_COUNTERMODE_DOWN;
  TimHandleDelay.Init.Period = 35;
  TimHandleDelay.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  TimHandleDelay.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&TimHandleDelay) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&TimHandleDelay, &sClockSourceConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&TimHandleDelay, &sMasterConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }
*/

	/* Set TIMx instance */
	  TimHandleDelay.Instance             = TIMER_US_DELAY;
	  TimHandleDelay.Init.Period          = TIMER_US_DELAY_PERIOD;
	  TimHandleDelay.Init.Prescaler       = TIMER_US_DELAY_PRESCALER;
	  TimHandleDelay.Init.ClockDivision   = 0;
	  TimHandleDelay.Init.CounterMode     = TIM_COUNTERMODE_DOWN;
	  HAL_TIM_Base_Init(&TimHandleDelay);
}

static void MX_TIM3_Init(void)
{
/*
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  TimHandleTimeout.Instance = TIM3;
  TimHandleTimeout.Init.Prescaler = 72;
  TimHandleTimeout.Init.CounterMode = TIM_COUNTERMODE_DOWN;
  TimHandleTimeout.Init.Period = 1000;
  TimHandleTimeout.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  TimHandleTimeout.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&TimHandleTimeout) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&TimHandleTimeout, &sClockSourceConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&TimHandleTimeout, &sMasterConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }*/
  TimHandleTimeout.Instance           = TIMER_TIMEOUT;
  TimHandleTimeout.Init.Period        = TIMER_TIMEOUT_PERIOD;
  TimHandleTimeout.Init.Prescaler     = TIMER_TIMEOUT_PRESCALER;
  TimHandleTimeout.Init.ClockDivision = 0;
  TimHandleTimeout.Init.CounterMode   = TIM_COUNTERMODE_DOWN;
  HAL_TIM_Base_Init(&TimHandleTimeout);

}


static void MX_TIM4_Init(void)
{

  /*TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  TimHandleAppli.Instance = TIM4;
  TimHandleAppli.Init.Prescaler = 72;
  TimHandleAppli.Init.CounterMode = TIM_COUNTERMODE_UP;
  TimHandleAppli.Init.Period = 1000;
  TimHandleAppli.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  TimHandleAppli.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&TimHandleAppli) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&TimHandleAppli, &sClockSourceConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&TimHandleAppli, &sMasterConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }*/
	/* Set TIMx instance */
	  TimHandleAppli.Instance             = APPLI_TIMER_TIMEOUT;
	  TimHandleAppli.Init.Period          = APPLI_TIMER_TIMEOUT_PERIOD;
	  TimHandleAppli.Init.Prescaler       = APPLI_TIMER_TIMEOUT_PRESCALER;
	  TimHandleAppli.Init.ClockDivision   = 0;
	  TimHandleAppli.Init.CounterMode     = TIM_COUNTERMODE_DOWN;
	  HAL_TIM_Base_Init(&TimHandleAppli);

}


void FillTagURI(char* pTagType)
{
	/* Fill the structure of the NDEF URI */
	strcpy(url.Information,pTagType);
	strcpy(url.protocol,"http://");
	strcpy(url.URI_Message,"st.com/nfc-rfid");
}



/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/**
  * @}
  */

/**
  * @}
  */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
